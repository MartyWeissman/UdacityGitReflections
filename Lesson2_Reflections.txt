Lesson 2 reflections

1.  What happens when you initialize a repository? Why do you need to do it?

Git creates a .git directory with metadata.  This will allow Git to perform version control on the repository.

2.  How is the staging area different from the working directory and the repository? What value do you think it offers?

It's intermediate between the working directory and the repository.  It offers the ability to commit only some of the files to the repository, I think.

3.  How can you use the staging area to make sure you have one commit per logical change?

I can use the staging area to add one file (if logical) at a time, then commit before adding more to the staging area.

4.  What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful if I'm creating multiple versions of the same project.  They would allow me to switch between versions easily without changing all sorts of filenames.  Along each branch, I could use version control.

5.  How do the diagrams help you visualize the branch structure?

Like a family tree, they make it very easy to detect reachability and see branch-points.

6.  What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Well, it's kind of obvious.  It merges the branches together.

7.  What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging seems to require a lot of care, and can bring up lots of conflicts.  But merging inherently brings up conflicts, so perhaps it's as good as doing merges manually.